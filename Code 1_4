1/4
library(raster)
library(RStoolbox)
library(rasterdiv)
library(rgdal)
setwd("C:/lab/")

#Time series analysis
#Importare tanti o vari tipi di immagini/dati in blocco 
#con immagini satellitari non posso distinguere strutturalmente le coltivazione dalla foresta (almeno che non faccia analisi iperspettrale)
#posso farlo attraverso la geometria degli spazi attraverso indici.....

#prima parte della lezione abbiamo visto alcuni tipi di indici e variabili, cercare tra i file su Virtuale

#Land Surface Temperature
#Quanto è cambiata in Groelandia la temp nel tempo?
setwd("C:/lab/greenland")
#install.packages("rasterVis")
library(rasterVis)

#Operazione usuale "uno per uno"
#uso funzione "raster" mi permette di inserire dati composti da un unico layer
lst_2000 <- raster("lst_2000.tif")
lst_2005 <- raster("lst_2005.tif")
lst_2010 <- raster("lst_2010.tif")
lst_2015 <- raster("lst_2015.tif")
#interrogando vedo che sono immagini a 16bit
cl <- colorRampPalette(c("blue","light blue","pink","red"))(100)
# par -> multiframe
par(mfrow=c(2,2))
plot(lst_2000, col=cl)
plot(lst_2005, col=cl)
plot(lst_2010, col=cl)
plot(lst_2015, col=cl)

#Operazione di importo set di dati in blocco
#attraverso list.file(pattern=...) vado a ragruppare file con pattern comune
#attraverso l'argomento pattern, all'interno della funzione, diamo info riguardo ad un carattere = per tutti i files che vogliamo
rlist <- list.files(pattern="lst")
rlist
#funzione lapply va a ragruppare in una lista i files e li processa per la stessa funzione (in questo caso "raster")
import <- lapply(rlist,raster)
import
#con funzione "stack" prendiamo i singoli layer e li uniamo per formare un unico file
tgr <- stack(import)
tgr
plot(tgr, col=cl)
plot(tgr[[1]], col=cl)
plotRGB(tgr, r=1, g=2, b=3, stretch="lin")

#writeRaster: Write raster data to a file  -  funzione per esportare

7/4
#time series analysis - level decrease of NO2 (diossidi di azoto) lockdown
# https://www.esa.int/Applications/Observing_the_Earth/Copernicus/Sentinel-5P/Coronavirus_lockdown_leading_to_drop_in_pollution_across_Europe
# https://acp.copernicus.org/preprints/acp-2020-995/acp-2020-995.pdf

#worcking directory
setwd("C:/lab/EN")

EN01 <- raster("EN_0001.png") #16:48 differenza tra funzione brick e raster
cl <- colorRampPalette(c('red','orange','yellow'))(100)
plot(EN01, col=cl)

EN13 <- raster("EN_0013.png")
plot(EN13, col=cl)

#let's import all the dataset
list <- list.files(pattern="EN")
list

import <- lapply(list,raster)
import

EN <- stack(import)
EN
plot(EN, col=cl)

#list.files lista dei files con carattere (pattern="") comune nel nome
#lapply importare blocco utilizzando funzione comune, il risultato è un insieme di dati diversi
#stack ragruppare i files in uno unico

# plot only the first image of the stack
plot(EN$EN_0001, col=cl)

#multiframe, confronto imm. 1 e 13
par(mfrow=c(2,1))
plot(EN[[1]], col=cl)
plot(EN[[13]], col=cl)
# OR! secondo metodo, creo un nuovo oggetto che con funzione stack ha solo queste due immagini
EN1_13 <- stack(EN[[1]], EN[[13]])
plot(EN1_13, col=cl)
dev.off()

# difference imm. 1 e 13 
ENdif <- EN$EN_0001 - EN$EN_0013
cldif <- colorRampPalette(c('blue','white','red'))(100)
plot(ENdif, col=cldif)
#zone rosse con maggiore decrescita dei livelli di NO2

8/4
#funzione che mi permette di usare codici esterni, provenienti da altre fonti
#si può aprire il codice su un editor text, salvarlo, e poi introdurlo in R che lo legge direttamente

#bisogna settare la worcking directory
setwd("C:/lab")

#funzione "source" e caricare il codice
source("lez.txt")

#riprendo l'ultima parte della lezione di ieri, andando a importare nuovamente le imm satellitari dalla cartella EN

#RGB intersenzione componenti per poter vedere immagini a colori naturali con banda3=rosso banda2=verde banda1=blu
#in questo caso si va a vedere le bande di azoto (valori più alti: periodo1 rosso, periodo2 verde, periodo3 blu)
# plotRGB
plotRGB(EN, r=1, g=7, b=13, stretch="lin")
