#Seminario LiDAR Michele Torresani 26/5 dalle 16/18

#Progetti: 1 EU 2023 - 2 ISPRA borse di studio!!!!!!!!!

#19/5 Lez. di recupero del 6/5

library(raster)
library(RStoolbox)
library(ggplot2)
library(patchwork)
library(viridis)
setwd("C:/lab/")

#misuro la eterogeneità in termini spettrali -> maggiore essa sarà e maggiore sarà la composizione di nicchie, differenti tra loro

#prima fase è immagine univariata 

p224r63_2011 <- brick("p224r63_2011_masked.grd")

plot(p224r63_2011)

p224r63_2011

sen <- brick("sentinel.png")
sen
#useremo i primi tre livelli NIR=1, red=2, green=3
ggRGB(sen, 1, 2, 3)
#Visualizzare immagine a colori invertiti
im1 <- ggRGB(sen, 2, 1, 3)

#passare da tre layers a un layer unico che riassume tutte le informazioni
#funzione "rasterPCA", da in pasto alla componente principale tutte le altre bande così da riassumerle
#Multivariate analysis
sen_pca <- rasterPCA(sen)
sen_pca
#si vengno a creare vari gruppi (simil classificazione, qui però si aveva solo $map)
#$call <- funzione utilizzata $model <- modello che andiamo ad utilizzare, matrice di correlazione tra le bande
#$map
#come sapere quanta variabilità spiega la nostra PCA?
#funzione "summary()"
summary(sen_pca$model)
#ogni componente spiega una % di variabilità derivata dalla PCA

plot(sen_pca$map)
#___________robe+
pc1 <- sen_pca$map$PC1
pc2 <- sen_pca$map$PC2
pc3 <- sen_pca$map$PC3
 
g1 <- ggplot() +
geom_raster(pc1, mapping=aes(x=x, y=y, fill=PC1))

g2 <- ggplot() +
geom_raster(pc2, mapping=aes(x=x, y=y, fill=PC2))

g3 <- ggplot() +
geom_raster(pc3, mapping=aes(x=x, y=y, fill=PC3))

g1 + g2 + g3

#calcolo della variabilità
#standard deviation of PC1
sd_pc1 <- focal(pc1, matrix(1/9, 3, 3), fun=sd)
sd_pc1

#Map by ggplot the standard deviation of the first principal component
ggplot() +
geom_raster(sd_pc1, mapping=aes(x=x, y=y, fill=layer))

#https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html vedo colori a seconda di patologie

ggplot() +
geom_raster(sd_pc1, mapping=aes(x=x, y=y, fill=layer)) +
scale_fill_viridis(option="inferno")

#images altogether
im1 <- ggRGB(sen, 2, 1, 3)

im2 <- ggplot() +
geom_raster(pc1, mapping=aes(x=x, y=y, fill=PC1))
 
im3 <- ggplot() +
geom_raster(sd_pc1, mapping=aes(x=x, y=y, fill=layer)) +
scale_fill_viridis(option="inferno")

im1 + im2 / im3

#Calcolare eterogeneità in 5x5 window
sd_pc1 <- focal(pc1, matrix(1/25, 5, 5), fun=sd)
